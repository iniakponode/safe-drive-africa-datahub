[
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTMLResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "HTMLResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "Jinja2Templates",
        "importPath": "fastapi.templating",
        "description": "fastapi.templating",
        "isExtraImport": true,
        "detail": "fastapi.templating",
        "documentation": {}
    },
    {
        "label": "Jinja2Templates",
        "importPath": "fastapi.templating",
        "description": "fastapi.templating",
        "isExtraImport": true,
        "detail": "fastapi.templating",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "get_cached_data",
        "importPath": "app.cache",
        "description": "app.cache",
        "isExtraImport": true,
        "detail": "app.cache",
        "documentation": {}
    },
    {
        "label": "get_cached_data",
        "importPath": "app.cache",
        "description": "app.cache",
        "isExtraImport": true,
        "detail": "app.cache",
        "documentation": {}
    },
    {
        "label": "get_cached_data",
        "importPath": "app.cache",
        "description": "app.cache",
        "isExtraImport": true,
        "detail": "app.cache",
        "documentation": {}
    },
    {
        "label": "refresh_cache_periodically",
        "importPath": "app.cache",
        "description": "app.cache",
        "isExtraImport": true,
        "detail": "app.cache",
        "documentation": {}
    },
    {
        "label": "fetch_all_processed_data",
        "importPath": "app.services.data_service",
        "description": "app.services.data_service",
        "isExtraImport": true,
        "detail": "app.services.data_service",
        "documentation": {}
    },
    {
        "label": "fetch_all_processed_data",
        "importPath": "app.services.data_service",
        "description": "app.services.data_service",
        "isExtraImport": true,
        "detail": "app.services.data_service",
        "documentation": {}
    },
    {
        "label": "fetch_all_processed_data",
        "importPath": "app.services.data_service",
        "description": "app.services.data_service",
        "isExtraImport": true,
        "detail": "app.services.data_service",
        "documentation": {}
    },
    {
        "label": "EventSourceResponse",
        "importPath": "sse_starlette.sse",
        "description": "sse_starlette.sse",
        "isExtraImport": true,
        "detail": "sse_starlette.sse",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationInfo",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "dotenv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dotenv",
        "description": "dotenv",
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "fastapi.staticfiles",
        "description": "fastapi.staticfiles",
        "isExtraImport": true,
        "detail": "fastapi.staticfiles",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.routes",
        "description": "app.routes",
        "isExtraImport": true,
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.routes.dashboard",
        "description": "app.routes.dashboard",
        "peekOfCode": "logger = logging.getLogger(__name__)\nrouter = APIRouter()\ntemplates = Jinja2Templates(directory=\"app/templates\")\n@router.get(\"/\", response_class=HTMLResponse)\nasync def main_dashboard_page(request: Request):\n    processed_data_payload = get_cached_data()\n    data_unavailable_for_template = False\n    # Default structure for the old 'aggregates' object\n    template_aggregates = {\n        'total_drivers': 0,",
        "detail": "app.routes.dashboard",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routes.dashboard",
        "description": "app.routes.dashboard",
        "peekOfCode": "router = APIRouter()\ntemplates = Jinja2Templates(directory=\"app/templates\")\n@router.get(\"/\", response_class=HTMLResponse)\nasync def main_dashboard_page(request: Request):\n    processed_data_payload = get_cached_data()\n    data_unavailable_for_template = False\n    # Default structure for the old 'aggregates' object\n    template_aggregates = {\n        'total_drivers': 0,\n        'total_trips': 0,",
        "detail": "app.routes.dashboard",
        "documentation": {}
    },
    {
        "label": "templates",
        "kind": 5,
        "importPath": "app.routes.dashboard",
        "description": "app.routes.dashboard",
        "peekOfCode": "templates = Jinja2Templates(directory=\"app/templates\")\n@router.get(\"/\", response_class=HTMLResponse)\nasync def main_dashboard_page(request: Request):\n    processed_data_payload = get_cached_data()\n    data_unavailable_for_template = False\n    # Default structure for the old 'aggregates' object\n    template_aggregates = {\n        'total_drivers': 0,\n        'total_trips': 0,\n        'total_sensor_data': 0, # This will be 0 if sensor API returns no data",
        "detail": "app.routes.dashboard",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.routes.driver_stats",
        "description": "app.routes.driver_stats",
        "peekOfCode": "logger = logging.getLogger(__name__)\nrouter = APIRouter()\ntemplates = Jinja2Templates(directory=\"app/templates\")\n@router.get(\"/drivers\", response_class=HTMLResponse)\nasync def driver_statistics_page(request: Request):\n    \"\"\"\n    Serves the driver statistics page.\n    It retrieves processed data from a cache. If the cache is empty (e.g., on first startup),\n    it can optionally perform an initial data fetch and process.\n    \"\"\"",
        "detail": "app.routes.driver_stats",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routes.driver_stats",
        "description": "app.routes.driver_stats",
        "peekOfCode": "router = APIRouter()\ntemplates = Jinja2Templates(directory=\"app/templates\")\n@router.get(\"/drivers\", response_class=HTMLResponse)\nasync def driver_statistics_page(request: Request):\n    \"\"\"\n    Serves the driver statistics page.\n    It retrieves processed data from a cache. If the cache is empty (e.g., on first startup),\n    it can optionally perform an initial data fetch and process.\n    \"\"\"\n    processed_data_payload = get_cached_data()",
        "detail": "app.routes.driver_stats",
        "documentation": {}
    },
    {
        "label": "templates",
        "kind": 5,
        "importPath": "app.routes.driver_stats",
        "description": "app.routes.driver_stats",
        "peekOfCode": "templates = Jinja2Templates(directory=\"app/templates\")\n@router.get(\"/drivers\", response_class=HTMLResponse)\nasync def driver_statistics_page(request: Request):\n    \"\"\"\n    Serves the driver statistics page.\n    It retrieves processed data from a cache. If the cache is empty (e.g., on first startup),\n    it can optionally perform an initial data fetch and process.\n    \"\"\"\n    processed_data_payload = get_cached_data()\n    data_unavailable_for_template = False",
        "detail": "app.routes.driver_stats",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routes.live",
        "description": "app.routes.live",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/live\")\nasync def live_feed():\n    async def event_generator():\n        while True:\n            data = get_cached_data()\n            if data is not None:\n                yield {\"event\": \"update\", \"data\": data}\n            await asyncio.sleep(1)\n    return EventSourceResponse(event_generator())",
        "detail": "app.routes.live",
        "documentation": {}
    },
    {
        "label": "BaseApiModel",
        "kind": 6,
        "importPath": "app.services.data_service",
        "description": "app.services.data_service",
        "peekOfCode": "class BaseApiModel(BaseModel):\n    class Config:\n        extra = 'ignore' # Ignore extra fields from API not defined in model\n    @classmethod\n    def strip_empty_str(cls, v: Any) -> Optional[Any]:\n        if isinstance(v, str) and not v.strip():\n            return None\n        return v\nclass DriverProfileModel(BaseApiModel):\n    driverProfileId: str",
        "detail": "app.services.data_service",
        "documentation": {}
    },
    {
        "label": "DriverProfileModel",
        "kind": 6,
        "importPath": "app.services.data_service",
        "description": "app.services.data_service",
        "peekOfCode": "class DriverProfileModel(BaseApiModel):\n    driverProfileId: str\n    email: Optional[str] = None\n    # name: Optional[str] = None # Example: Add other fields you care about\n    @field_validator('driverProfileId', 'email', mode='before')\n    @classmethod\n    def normalize_and_strip_fields(cls, v: Any, info: ValidationInfo): # info can be used for field_name if needed\n        \"\"\"\n        Normalizes string fields: strips whitespace, converts empty strings to None.\n        \"\"\"",
        "detail": "app.services.data_service",
        "documentation": {}
    },
    {
        "label": "TripModel",
        "kind": 6,
        "importPath": "app.services.data_service",
        "description": "app.services.data_service",
        "peekOfCode": "class TripModel(BaseApiModel):\n    # Assuming 'id' or 'trip_id' is the trip's own identifier\n    # We'll handle potential aliasing during raw data parsing\n    trip_id: str\n    driverProfileId: Optional[str] = None\n    @field_validator('trip_id', 'driverProfileId', mode='before')\n    @classmethod\n    def normalize_empty_strings_to_none(cls, v: Any, info: ValidationInfo): # info can be useful for context if needed\n        # info.field_name will tell you if it's 'trip_id' or 'driverProfileId'\n        if isinstance(v, str):",
        "detail": "app.services.data_service",
        "documentation": {}
    },
    {
        "label": "SensorValueItemModel",
        "kind": 6,
        "importPath": "app.services.data_service",
        "description": "app.services.data_service",
        "peekOfCode": "class SensorValueItemModel(BaseModel):\n    # Define if sensor values have a specific structure, otherwise use List[float]\n    # For simplicity, assuming List[float] for now.\n    pass\nclass SensorDataModel(BaseApiModel):\n    # We'll handle potential aliasing for trip_id during raw data parsing\n    trip_id: Optional[str] = None\n    values: List[Union[float, int]] = [] # Allow int or float\n    _normalize_trip_id = field_validator('trip_id', mode='before')(BaseApiModel.strip_empty_str)\n    @field_validator('values', mode='before')",
        "detail": "app.services.data_service",
        "documentation": {}
    },
    {
        "label": "SensorDataModel",
        "kind": 6,
        "importPath": "app.services.data_service",
        "description": "app.services.data_service",
        "peekOfCode": "class SensorDataModel(BaseApiModel):\n    # We'll handle potential aliasing for trip_id during raw data parsing\n    trip_id: Optional[str] = None\n    values: List[Union[float, int]] = [] # Allow int or float\n    _normalize_trip_id = field_validator('trip_id', mode='before')(BaseApiModel.strip_empty_str)\n    @field_validator('values', mode='before')\n    @classmethod\n    def parse_sensor_values(cls, v: Any) -> List[Union[float, int]]:\n        if isinstance(v, str):\n            try:",
        "detail": "app.services.data_service",
        "documentation": {}
    },
    {
        "label": "process_and_aggregate_data",
        "kind": 2,
        "importPath": "app.services.data_service",
        "description": "app.services.data_service",
        "peekOfCode": "def process_and_aggregate_data(\n    valid_drivers: List[DriverProfileModel],\n    valid_trips: List[TripModel],\n    valid_sensor_data: List[SensorDataModel]\n) -> Dict[str, Any]:\n    logger.info(f\"Processing data: {len(valid_drivers)} valid drivers, {len(valid_trips)} valid trips, {len(valid_sensor_data)} valid sensor data records.\")\n    # 1. Create driver lookup map (from validated drivers)\n    #    Using driverProfileId as key.\n    drivers_map: Dict[str, DriverProfileModel] = {\n        driver.driverProfileId: driver for driver in valid_drivers if driver.driverProfileId",
        "detail": "app.services.data_service",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.services.data_service",
        "description": "app.services.data_service",
        "peekOfCode": "logger = logging.getLogger(__name__)\nDRIVERS_URL = \"https://api.safedriveafrica.com/api/driver_profiles/\"\nTRIPS_URL = \"https://api.safedriveafrica.com/api/trips/\"\nSENSOR_URL = \"https://api.safedriveafrica.com/api/raw_sensor_data/\"\n# --- Pydantic Models for Data Validation ---\nclass BaseApiModel(BaseModel):\n    class Config:\n        extra = 'ignore' # Ignore extra fields from API not defined in model\n    @classmethod\n    def strip_empty_str(cls, v: Any) -> Optional[Any]:",
        "detail": "app.services.data_service",
        "documentation": {}
    },
    {
        "label": "DRIVERS_URL",
        "kind": 5,
        "importPath": "app.services.data_service",
        "description": "app.services.data_service",
        "peekOfCode": "DRIVERS_URL = \"https://api.safedriveafrica.com/api/driver_profiles/\"\nTRIPS_URL = \"https://api.safedriveafrica.com/api/trips/\"\nSENSOR_URL = \"https://api.safedriveafrica.com/api/raw_sensor_data/\"\n# --- Pydantic Models for Data Validation ---\nclass BaseApiModel(BaseModel):\n    class Config:\n        extra = 'ignore' # Ignore extra fields from API not defined in model\n    @classmethod\n    def strip_empty_str(cls, v: Any) -> Optional[Any]:\n        if isinstance(v, str) and not v.strip():",
        "detail": "app.services.data_service",
        "documentation": {}
    },
    {
        "label": "TRIPS_URL",
        "kind": 5,
        "importPath": "app.services.data_service",
        "description": "app.services.data_service",
        "peekOfCode": "TRIPS_URL = \"https://api.safedriveafrica.com/api/trips/\"\nSENSOR_URL = \"https://api.safedriveafrica.com/api/raw_sensor_data/\"\n# --- Pydantic Models for Data Validation ---\nclass BaseApiModel(BaseModel):\n    class Config:\n        extra = 'ignore' # Ignore extra fields from API not defined in model\n    @classmethod\n    def strip_empty_str(cls, v: Any) -> Optional[Any]:\n        if isinstance(v, str) and not v.strip():\n            return None",
        "detail": "app.services.data_service",
        "documentation": {}
    },
    {
        "label": "SENSOR_URL",
        "kind": 5,
        "importPath": "app.services.data_service",
        "description": "app.services.data_service",
        "peekOfCode": "SENSOR_URL = \"https://api.safedriveafrica.com/api/raw_sensor_data/\"\n# --- Pydantic Models for Data Validation ---\nclass BaseApiModel(BaseModel):\n    class Config:\n        extra = 'ignore' # Ignore extra fields from API not defined in model\n    @classmethod\n    def strip_empty_str(cls, v: Any) -> Optional[Any]:\n        if isinstance(v, str) and not v.strip():\n            return None\n        return v",
        "detail": "app.services.data_service",
        "documentation": {}
    },
    {
        "label": "get_cached_data",
        "kind": 2,
        "importPath": "app.cache",
        "description": "app.cache",
        "peekOfCode": "def get_cached_data():\n    \"\"\"Return the latest cached data.\"\"\"\n    return _cached_data\ndef compute_checksum(data: dict) -> str:\n    \"\"\"Compute an MD5 checksum of the given data (JSON serialized with sorted keys).\"\"\"\n    try:\n        # Convert the data to a JSON string with sorted keys.\n        data_str = json.dumps(data, sort_keys=True)\n        return hashlib.md5(data_str.encode(\"utf-8\")).hexdigest()\n    except Exception as e:",
        "detail": "app.cache",
        "documentation": {}
    },
    {
        "label": "compute_checksum",
        "kind": 2,
        "importPath": "app.cache",
        "description": "app.cache",
        "peekOfCode": "def compute_checksum(data: dict) -> str:\n    \"\"\"Compute an MD5 checksum of the given data (JSON serialized with sorted keys).\"\"\"\n    try:\n        # Convert the data to a JSON string with sorted keys.\n        data_str = json.dumps(data, sort_keys=True)\n        return hashlib.md5(data_str.encode(\"utf-8\")).hexdigest()\n    except Exception as e:\n        logger.error(\"Error computing checksum: %s\", e)\n        return \"\"\n# from app.services.data_service import fetch_all_processed_data # New import",
        "detail": "app.cache",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.cache",
        "description": "app.cache",
        "peekOfCode": "logger = logging.getLogger(__name__)\nREFRESH_INTERVAL = 10  # seconds\n_cached_data = None  \n_cached_checksum = None\ndef get_cached_data():\n    \"\"\"Return the latest cached data.\"\"\"\n    return _cached_data\ndef compute_checksum(data: dict) -> str:\n    \"\"\"Compute an MD5 checksum of the given data (JSON serialized with sorted keys).\"\"\"\n    try:",
        "detail": "app.cache",
        "documentation": {}
    },
    {
        "label": "REFRESH_INTERVAL",
        "kind": 5,
        "importPath": "app.cache",
        "description": "app.cache",
        "peekOfCode": "REFRESH_INTERVAL = 10  # seconds\n_cached_data = None  \n_cached_checksum = None\ndef get_cached_data():\n    \"\"\"Return the latest cached data.\"\"\"\n    return _cached_data\ndef compute_checksum(data: dict) -> str:\n    \"\"\"Compute an MD5 checksum of the given data (JSON serialized with sorted keys).\"\"\"\n    try:\n        # Convert the data to a JSON string with sorted keys.",
        "detail": "app.cache",
        "documentation": {}
    },
    {
        "label": "_cached_data",
        "kind": 5,
        "importPath": "app.cache",
        "description": "app.cache",
        "peekOfCode": "_cached_data = None  \n_cached_checksum = None\ndef get_cached_data():\n    \"\"\"Return the latest cached data.\"\"\"\n    return _cached_data\ndef compute_checksum(data: dict) -> str:\n    \"\"\"Compute an MD5 checksum of the given data (JSON serialized with sorted keys).\"\"\"\n    try:\n        # Convert the data to a JSON string with sorted keys.\n        data_str = json.dumps(data, sort_keys=True)",
        "detail": "app.cache",
        "documentation": {}
    },
    {
        "label": "_cached_checksum",
        "kind": 5,
        "importPath": "app.cache",
        "description": "app.cache",
        "peekOfCode": "_cached_checksum = None\ndef get_cached_data():\n    \"\"\"Return the latest cached data.\"\"\"\n    return _cached_data\ndef compute_checksum(data: dict) -> str:\n    \"\"\"Compute an MD5 checksum of the given data (JSON serialized with sorted keys).\"\"\"\n    try:\n        # Convert the data to a JSON string with sorted keys.\n        data_str = json.dumps(data, sort_keys=True)\n        return hashlib.md5(data_str.encode(\"utf-8\")).hexdigest()",
        "detail": "app.cache",
        "documentation": {}
    },
    {
        "label": "ENVIRONMENT",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "ENVIRONMENT = os.getenv(\"ENVIRONMENT\", \"development\")\nif ENVIRONMENT == \"development\":\n    dotenv.load_dotenv()\napp = FastAPI(\n    title=\"DataHub Analysis Dashboard\"\n)\n# Mount static files (if any)\napp.mount(\"/static\", StaticFiles(directory=\"app/static\"), name=\"static\")\n# Include all routes\napp.include_router(router)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(\n    title=\"DataHub Analysis Dashboard\"\n)\n# Mount static files (if any)\napp.mount(\"/static\", StaticFiles(directory=\"app/static\"), name=\"static\")\n# Include all routes\napp.include_router(router)\n@app.on_event(\"startup\")\nasync def startup_event():\n    # Start background cache refresh task.",
        "detail": "main",
        "documentation": {}
    }
]